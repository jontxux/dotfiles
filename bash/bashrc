# ~/.bashrc: configuración ejecutada por bash(1) para shells no interactivos.

# Verifica si el shell es interactivo
case $- in
    *i*) ;;
      *) return;;
esac

# -------------------------
# Configuración de Colores
# -------------------------
# Habilita el coloreado de la salida del comando ls
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi
source ~/.local/share/lscolors.sh

# -------------------------
# Alias Útiles
# -------------------------
alias ll='ls -lah'
alias la='ls -A'
alias l='ls -CF'
alias x='extraer'
alias pbcopy='wl-copy'
alias pbpaste='wl-paste'
alias reboot='sudo reboot'
alias shutdown='sudo shutdown'
alias actualizar='sudo aptitude update && sudo aptitude safe-upgrade -y'

# -------------------------
# Configuraciones de Historial
# -------------------------
HISTSIZE=1000
HISTFILESIZE=2000
export HISTCONTROL=ignoredups:erasedups  # No guarda líneas duplicadas consecutivas en el historial
shopt -s histappend  # Añade comandos al historial en lugar de sobrescribirlo
PROMPT_COMMAND='history -a'  # Guarda el historial después de cada comando

# -------------------------
# Opciones de Shell
# -------------------------
# Verifica la ventana después de cada comando y actualiza LINES y COLUMNS si es necesario
shopt -s checkwinsize

# -------------------------
# Autocompletado
# -------------------------
# Autocompletado con tabulador para comandos y archivos
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# -------------------------
# Personalización del Prompt
# -------------------------
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# -------------------------
# Configuraciones de Entorno Wayland
# -------------------------
export GDK_BACKEND=wayland
export QT_QPA_PLATFORM=wayland
# export GDK_SCALE=2
# export GDK_DPI_SCALE=0.5

# -------------------------
# Configuraciones de Entorno
# -------------------------
export PATH=$PATH:/usr/libexec/imv
export GTK_THEME=Adwaita:dark
export QT_QPA_PLATFORMTHEME=qt5ct
export MOZ_ENABLE_WAYLAND=1
export EDITOR=vim
export VISUAL=vim
export BROWSER=qutebroser

# -------------------------
# Funciones Personalizadas
# -------------------------

# Función para buscar archivos por nombre
buscar() {
  if [ -n "$1" ]; then
    find . -type f -iname "*$1*"
  else
    echo "Uso: buscar <nombre_archivo>"
  fi
}

comprimir() {
    if [ $# -lt 2 ]; then
        echo "Uso: comprimir <nombre_archivo_comprimido> <archivo/directorio...>"
        return 1
    fi

    local nombre_archivo_comprimido="$1"  # El primer argumento es el nombre del archivo comprimido
    local archivos_a_comprimir=("${@:2}")  # Todos los argumentos después del primero son los archivos/directorios a comprimir

    case "${nombre_archivo_comprimido##*.}" in
        tar)
            tar cf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        gz)
            tar czf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        bz2)
            tar cjf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        xz)
            tar cJf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        zip)
            zip -r "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        7z)
            7z a "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        *)
            echo "Extensión de archivo no soportada: ${nombre_archivo_comprimido##*.}"
            return 1
            ;;
    esac

    echo "Archivos comprimidos en '$nombre_archivo_comprimido'."
}

extraer() {
    if [ -z "$1" ]; then
        echo "Usage: extract <file>..."
        return 1
    fi

    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "$file does not exist."
            return 1
        fi

        # Determina el método de extracción basado en la extensión del archivo
        case "$file" in
            *.tar.bz2) tar -xvjf "$file" ;;
            *.tar.gz)  tar -xvzf "$file" ;;
            *.bz2)     bunzip2 "$file" ;;
            *.rar)     unrar x "$file" ;;
            *.gz)      gunzip "$file" ;;
            *.tar)     tar -xvf "$file" ;;
            *.tbz2)    tar -xvjf "$file" ;;
            *.tgz)     tar -xvzf "$file" ;;
            *.zip)     unzip "$file" ;;
            *.Z)       uncompress "$file" ;;
            *.7z)      7z x "$file" ;;
            *)         echo "No se puede descomprimir '$file'" ;;
        esac
    done
}

# Función para montar un dispositivo USB
montar_usb() {
    local dispositivo="${1:-/dev/sdb1}"  # Utiliza /dev/sdb1 como valor predeterminado si no se proporciona ningún argumento

    echo "Montando dispositivo $dispositivo..."
    # Monta el dispositivo usando udisksctl
    udisksctl mount -b "$dispositivo"
}

# Función para desmontar un dispositivo USB
desmontar_usb() {
    local dispositivo="${1:-/dev/sdb1}"  # Utiliza /dev/sdb1 como valor predeterminado si no se proporciona ningún argumento

    echo "Desmontando dispositivo $dispositivo..."
    # Desmonta el dispositivo usando udisksctl
    udisksctl unmount -b "$dispositivo" && echo "Dispositivo $dispositivo desmontado con éxito." || return 1

    # Apaga el dispositivo para asegurar una extracción segura
    echo "Apagando dispositivo $dispositivo..."
    udisksctl power-off -b "$dispositivo" && echo "Dispositivo $dispositivo apagado con éxito." || return 1
}

get_pixel_color() {
    local GEOMETRY=$(slurp -p -b 00000000 -c 00000000 -w 2)
    grim -g "$GEOMETRY" -t ppm - | convert - -format "%[pixel:p{0,0}]" info:
}

mpvbg() {
  nohup mpv "$@" > /dev/null 2>&1 &
}

subir() { 
  [ "$#" -eq 1 ] && echo "https://pixeldrain.com/u/$(curl -s -T "$1" https://pixeldrain.com/api/file/ | jq -r '.id')" || echo "Uso: subir <ruta_del_archivo>"; 
}

# -------------------------
# Inicialización de Otras Herramientas
# -------------------------
eval "$(zoxide init bash)"
if [ -f "$HOME/dotfiles/bash/bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_THEME=Single_line
    source "$HOME/dotfiles/bash/bash-git-prompt/gitprompt.sh"
fi

