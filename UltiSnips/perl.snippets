snippet grep "grep {..} @array"
grep { ${1:# code} } @${2:array};
endsnippet

snippet map "map {..} @array"
map { ${1:# code} } @${2:array};
endsnippet

snippet sort "sort {..} @array"
${1:@array} = sort { $a ${2:cmp} $b } $1;
endsnippet

snippet uniq "keys { map {$_ => 1} @array}" b
my ${1:@unique} = keys { map { $_ => 1 } ${2:@array} }->%*;
endsnippet

snippet SQL "<<'SQL'; {...} SQL"
<<'SQL';
$0
SQL
endsnippet

snippet Chrome "use WWW::Mechanize::Chrome" b
use Log::Log4perl qw(:easy);
use WWW::Mechanize::Chrome;
my $mech = WWW::Mechanize::Chrome->new(headless => 1);
$0
endsnippet

snippet Mechanize "use WWW::Mechanize" b
use WWW::Mechanize;
my $mech = WWW::Mechanize->new();
$0
endsnippet

snippet open "Open file"
open(my ${1:$file}, '${2:<}', '${3:file}') or die "${4:error: $!}";
$5
close($1);
endsnippet

snippet dumper "print Data::Dumper"
use Data::Dumper;
$Data::Dumper::Indent = 1;
print Dumper(${1:$variable});

endsnippet

snippet ife "Conditional if..else (ife)"
if ($1) {
	${2:# body...}
}
else {
	${3:# else...}
}

endsnippet

snippet ifee "Conditional if..elsif..else (ifee)"
if ($1) {
	${2:# body...}
}
elsif ($3) {
	${4:# elsif...}
}
else {
	${5:# else...}
}

endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:condition};
endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if ${2:condition};
endsnippet

snippet subs "Method (sub)"
sub ${1:function_name} {
    my $self = shift;
	${2:# body...}
}

endsnippet

snippet sub "Function (sub)"
sub ${1:function_name} {
	${2:# body...}
}

endsnippet

snippet xfor "Loop one-line (xfor)"
${1:expression} for @${2:array};
endsnippet
snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};
endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};
endsnippet

snippet sh "#!/usr/bin/env perl -w"
#!/usr/bin/env perl -w

use strict;
use warnings;
use v5.32;

endsnippet

snippet test "Test"
#!/usr/bin/env perl -w

use strict;
use Test::More tests => ${1:1};
use ${2:ModuleName};

ok(${3:assertion});

endsnippet

snippet class "class"
package ${1:ClassName};
use Moose;
use v5.30;

has ${2:atributo} => (is => ${3:'rw'}, isa => ${4:'Int'});

1;

endsnippet

# snippet class "class"
# package ${1:ClassName};

# ${2:use parent qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
# 	my $class = shift;
# 	$class = ref $class if ref $class;
# 	my $self = bless {}, $class;
# 	$self;
# }

# 1;

# endsnippet


snippet eval "eval"
local $@;
eval {
	${1:# do something risky...}
};
if (my $${2:exception} = $@) {
	${3:# handle failure...}
}

endsnippet

snippet for "for(@array)"
for (${1:@array}) {
	$2
}
endsnippet
snippet fori "for"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${3:# body...}
}

endsnippet

snippet fore "foreach"
foreach my $${1:x} (@${2:array}) {
	${3:# body...}
}

endsnippet

snippet if "if"
if ($1) {
	${2:# body...}
}

endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };

endsnippet

snippet unless "unless"
unless ($1) {
	${2:# body...}
}

endsnippet

snippet while "while"
while ($1) {
	${2:# body...}
}

endsnippet

snippet until "until"
until ($1) {
	${2:# body...}
}

endsnippet

# vim:ft=snippets:
