# Si no se está ejecutando de forma interactiva, no hacer nada
case $- in
    *i*) ;;
    *) return;;
esac

# Aliases
[ -r ~/.aliases ] && . ~/.aliases

# Historial
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# Historial options
setopt append_history       # Añadir al historial en vez de sobrescribirlo
setopt share_history        # Compartir el historial entre todas las sesiones de zsh
setopt hist_ignore_all_dups # Ignorar duplicados en todo el historial
setopt hist_ignore_dups     # Ignorar duplicados sucesivos
setopt hist_find_no_dups    # No mostrar duplicados al buscar en el historial
setopt hist_reduce_blanks   # Eliminar espacios en blanco redundantes
setopt hist_verify          # Editar línea de historial antes de aceptar
setopt extended_history     # Almacenar timestamp del comando en el historial

# Modo vi
bindkey -v
export KEYTIMEOUT=1

# Asignar la tecla Backspace para borrar el carácter anterior en todos los modos relevantes
bindkey -M viins '^H' backward-delete-char
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^H' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char

# Asignar la tecla Delete para borrar el carácter adelante
bindkey -M viins '^[[3~' delete-char
bindkey '^[[3~' delete-char

# Función para editar la línea de comandos
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^v' edit-command-line
bindkey -M vicmd 'v' edit-command-line

# Cambio de forma del cursor para diferentes modos vi
function zle-keymap-select {
    case "${KEYMAP}" in
        vicmd | block) echo -ne '\e[2 q' ;;  # Cursor de bloque para modo comando
        main | viins | '' | beam) echo -ne '\e[6 q' ;;  # Cursor de subrayado para modo inserción
    esac
    zle reset-prompt  # Redibujar el prompt
}
zle -N zle-keymap-select

# Inicializar con el cursor en modo inserción
function zle-line-init {
    ultimo_error="$?"  # Capturar el estado de salida
    zle -K viins  # Iniciar con keymap de inserción
    echo -ne '\e[6 q'  # Cursor de subrayado
    zle reset-prompt  # Redibujar el prompt
}
zle -N zle-line-init

# Finalizar con el cursor en modo comando
function zle-line-finish {
    echo -ne '\e[2 q'  # Cursor de bloque
}
zle -N zle-line-finish

# Autocompletado básico
autoload -U compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zmodload zsh/complist
_comp_options+=(globdots)  # Incluir archivos ocultos

# Búsqueda en el historial
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

# Plugins
source /home/jb/dotfiles/zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh

[ -r ~/.colores.sh ] && . ~/.colores.sh

# Definir las variables directamente para cada componente del prompt
USER_PROMPT=$'%{\e[1;32m%}%n%{\e[0m%}'  # Nombre de usuario en verde negrita
CWD_PROMPT=$'%{\e[1;34m%}%~%{\e[0m%}'  # Directorio de trabajo actual en azul negrita

# Componentes para el prompt minimalista
function prompt_status {
    local resaltar_procesos="0"  # Valor por defecto cuando no hay procesos en segundo plano
    if [ -n "$(jobs | sed -n '$=')" ]; then
        resaltar_procesos="4"  # Valor específico para resaltar cuando hay procesos en segundo plano
    fi

    local color_error="32"  # Verde por defecto para OK
    if [ "$ultimo_error" != "0" ]; then
        color_error="31"  # Rojo para error
    fi

    printf '%b' "%{\e[$resaltar_procesos;${color_error}m%}%(!.#.$)%{\e[0m%}"  # Usar '$' como el carácter de usuario
}

function prompt_keymap {
    local icono_modo="▶"  # Carácter para el modo de inserción
    [ "$KEYMAP" = 'vicmd' ] && icono_modo="■"  # Carácter para el modo normal
    printf '%b' "$icono_modo"
}

function prompt_git {
    local color_git="%{\e[0;32m%}"  # Verde por defecto para OK
    local nombre_rama="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"

    if [ -n "$nombre_rama" ]; then
        if [ -n "$(git status --porcelain 2> /dev/null)" ]; then
            color_git="%{\e[0;31m%}"  # Rojo para indicar cambios no guardados
        fi
        printf '%b' "$color_git$nombre_rama%{\e[0m%} "
    fi
}

# Setup for minimal prompt
setopt prompt_subst

# Establecer la variable PROMPT utilizando las variables definidas y funciones
PROMPT='${USER_PROMPT} ${CWD_PROMPT} $(prompt_status) $(prompt_git)$(prompt_keymap) '

