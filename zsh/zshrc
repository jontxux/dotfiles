# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
# export ZSH="$HOME/.oh-my-zsh"
export ZSH="$HOME/dotfiles/zsh/oh-my-zsh"
ZSH_CUSTOM="$HOME/dotfiles/zsh/custom"


# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="agnoster" # set by `omz`

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(vi-mode extract zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh
source ~/.local/share/lscolors.sh

bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
prompt_context() {}

# -------------------------
# Alias Útiles
# -------------------------
alias reboot='sudo reboot'
alias shutdown='sudo shutdown'
alias actualizar='sudo aptitude update && sudo aptitude safe-upgrade -y'

# -------------------------
# Funciones Personalizadas
# -------------------------

# Función para buscar archivos por nombre
buscar() {
  if [ -n "$1" ]; then
    find . -type f -iname "*$1*"
  else
    echo "Uso: buscar <nombre_archivo>"
  fi
}

comprimir() {
    if [ $# -lt 2 ]; then
        echo "Uso: comprimir <nombre_archivo_comprimido> <archivo/directorio...>"
        return 1
    fi

    local nombre_archivo_comprimido="$1"  # El primer argumento es el nombre del archivo comprimido
    local archivos_a_comprimir=("${@:2}")  # Todos los argumentos después del primero son los archivos/directorios a comprimir

    case "${nombre_archivo_comprimido##*.}" in
        tar)
            tar cf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        gz)
            tar czf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        bz2)
            tar cjf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        xz)
            tar cJf "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        zip)
            zip -r "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        7z)
            7z a "$nombre_archivo_comprimido" "${archivos_a_comprimir[@]}"
            ;;
        *)
            echo "Extensión de archivo no soportada: ${nombre_archivo_comprimido##*.}"
            return 1
            ;;
    esac

    echo "Archivos comprimidos en '$nombre_archivo_comprimido'."
}

# Función para montar un dispositivo USB
montar_usb() {
    local dispositivo="${1:-/dev/sdb1}"  # Utiliza /dev/sdb1 como valor predeterminado si no se proporciona ningún argumento

    echo "Montando dispositivo $dispositivo..."
    # Monta el dispositivo usando udisksctl
    udisksctl mount -b "$dispositivo"
}

# Función para desmontar un dispositivo USB
desmontar_usb() {
    local dispositivo="${1:-/dev/sdb1}"  # Utiliza /dev/sdb1 como valor predeterminado si no se proporciona ningún argumento

    echo "Desmontando dispositivo $dispositivo..."
    # Desmonta el dispositivo usando udisksctl
    udisksctl unmount -b "$dispositivo" && echo "Dispositivo $dispositivo desmontado con éxito." || return 1

    # Apaga el dispositivo para asegurar una extracción segura
    echo "Apagando dispositivo $dispositivo..."
    udisksctl power-off -b "$dispositivo" && echo "Dispositivo $dispositivo apagado con éxito." || return 1
}

get_pixel_color() {
    local GEOMETRY=$(slurp -p -b 00000000 -c 00000000 -w 2)
    grim -g "$GEOMETRY" -t ppm - | convert - -format "%[pixel:p{0,0}]" info:
}

mpvbg() {
  nohup mpv "$@" > /dev/null 2>&1 &
}

subir() {
  [ "$#" -eq 1 ] && echo "https://pixeldrain.com/u/$(curl -s -T "$1" https://pixeldrain.com/api/file/ | jq -r '.id')" || echo "Uso: subir <ruta_del_archivo>"; 
}

# -------------------------
# Inicialización de Otras Herramientas
# -------------------------
eval "$(zoxide init bash)"
