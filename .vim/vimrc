" ==============================================================================
" 1. Configuración Básica y Rendimiento
" ==============================================================================
set nocompatible
set encoding=utf-8
scriptencoding utf-8
let mapleader = ','
let maplocalleader = '\\'
set mouse=a
set clipboard=unnamedplus,unnamed
set ttyfast
set history=1000
set hidden
set autoread
set updatetime=300
set timeoutlen=500
set ttimeoutlen=50
set synmaxcol=500
set lazyredraw
set nobackup
set nowritebackup
set noswapfile

" Verificar si existe el directorio 'undodir' y crearlo si no existe
if !isdirectory($HOME . '/.vim/undodir')
  call mkdir($HOME . '/.vim/undodir', 'p')
endif

set undofile
set undodir=~/.vim/undodir
set secure
set modelines=0

" ==============================================================================
" 2. Interfaz de Usuario
" ==============================================================================
set number relativenumber
set cursorline
set cursorcolumn
set scrolloff=8
set sidescrolloff=5
set signcolumn=yes
set cmdheight=1
set title
set splitright
set splitbelow
set noshowmode
set showcmd
set showmatch
set matchtime=2
set list
set listchars=tab:»·,trail:·,nbsp:·
set fillchars=vert:│,fold:─
set pumheight=15
set wildmenu
set wildmode=full
set wildoptions=pum
set wildignorecase
set wildignore=*.o,*.obj,*~,*.pyc,.git,node_modules

" Cursor styles
let &t_SI = "\<Esc>[6 q"
let &t_EI = "\<Esc>[2 q"
let &t_SR = "\<Esc>[4 q"

" ==============================================================================
" 3. Búsqueda y Navegación
" ==============================================================================
set hlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan
set path+=**
set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
set grepformat=%f:%l:%c:%m

" ==============================================================================
" 4. Manejo de Archivos y Formatos
" ==============================================================================
set fileformats=unix,dos,mac
set autoread
set autowrite
set autochdir
set confirm
set noerrorbells
set novisualbell
set encoding=utf-8
set fileencoding=utf-8
set bomb
set binary

" ==============================================================================
" 5. Indentación y Formato
" ==============================================================================
set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set nowrap
set textwidth=80
set colorcolumn=80
set formatoptions+=j


" Indentación específica por lenguaje
augroup filetype_indent
  autocmd!
  autocmd FileType c,cpp,go,rust setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
  autocmd FileType javascript,typescript,html,css setlocal tabstop=2 shiftwidth=2 softtabstop=2
  autocmd FileType json,yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2
  autocmd FileType markdown setlocal wrap linebreak nolist
augroup END

" ==============================================================================
" 6. Instalación Automática de vim-plug
" ==============================================================================
let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ==============================================================================
" 7. Configuración de Plugins
" ==============================================================================
call plug#begin(data_dir . '/plugged')

" Core
Plug 'neoclide/coc.nvim', {'branch': 'release'} " LSP
Plug 'jiangmiao/auto-pairs'                     " Auto-cierre
Plug 'tpope/vim-commentary'                     " Comentarios
Plug 'tpope/vim-surround'                       " Manipular surrounds
Plug 'tpope/vim-repeat'                         " Repetir acciones
Plug 'mbbill/undotree'                          " Historial visual

" UI
Plug 'preservim/nerdtree'                       " File explorer
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " Fuzzy finder
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'                   " Barra de estado
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'                   " Iconos
Plug 'airblade/vim-gitgutter'                   " Git en gutter
Plug 'tpope/vim-fugitive'                       " Git integration
Plug 'liuchengxu/vista.vim'                     " Vista de tags

" Syntax
Plug 'sheerun/vim-polyglot'                     " Soporte multi-lenguaje
Plug 'styled-components/vim-styled-components'  " Styled Components
Plug 'HerringtonDarkholme/yats.vim'             " TypeScript
Plug 'ap/vim-css-color'                         " Resaltado de colores

" Productividad
Plug 'Chiel92/vim-autoformat'                   " Autoformateo de código
Plug 'jasonccox/vim-wayland-clipboard'
Plug 'machakann/vim-highlightedyank'            " Resaltado al copiar
Plug 'mhinz/vim-startify'                       " Pantalla de inicio
Plug 'jpalardy/vim-slime'

" Temas
Plug 'joshdick/onedark.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'sainnhe/everforest'
Plug 'sainnhe/gruvbox-material'
Plug 'chriskempson/base16-vim'

call plug#end()

" ==============================================================================
" 8. Configuración de Coc.nvim (LSP)
" ==============================================================================
let g:coc_global_extensions = [
  \ 'coc-tsserver', 'coc-json', 'coc-pyright',
  \ 'coc-rust-analyzer', 'coc-go', 'coc-html',
  \ 'coc-css', 'coc-eslint',
  \ 'coc-snippets', 'coc-emmet', 'coc-marketplace',
  \ ]
let g:coc_config_home = '~/.vim'
let g:coc_data_home = '~/.vim/coc'

" Atajos de teclado
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
inoremap <silent><expr> <c-space> coc#refresh()
nmap <silent> <F2> <Plug>(coc-rename)
" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"


" Formatear al guardar
" command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
" autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.json,*.md,*.html,*.css,*.scss Prettier

" ==============================================================================
" 9. Configuración de Plugins Específicos
" ==============================================================================
" NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeAutoDeleteBuffer=1

" FZF
nnoremap <C-p> :Files<CR>
nnoremap <silent> <leader>g :Rg<CR>
nnoremap <silent> <leader>b :Buffers<CR>
let g:fzf_layout = { 'down': '~30%' }

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#coc#enabled = 1

" GitGutter
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" Vista (Tags)
nmap <F8> :Vista!!<CR>

" Undotree
nnoremap <leader>u :UndotreeToggle<CR>

" Highlightedyank (resaltado al copiar)
let g:highlightedyank_highlight_duration = 750  " Duración en ms

"vim-autoformat
nnoremap <leader>f :Autoformat<CR>
vnoremap <leader>f :Autoformat<CR>
" nnoremap <F3> :Autoformat<CR>
" vnoremap <F3> :Autoformat<CR>
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 1

" vim-slime
let g:slime_target = "screen"

" Configuración específica por lenguaje
let g:formatterpath = ['/usr/local/bin', '/usr/bin']  " Asegura rutas de los binarios

let g:formatters_c = ['astyle_c']
let g:formatters_cpp = ['astyle_cpp']
let g:formatters_json = ['jq']

" Opciones personalizadas para astyle (Estilo Allman con ajustes)
let g:formatdef_astyle_c = '"astyle --mode=c --style=attach --indent=spaces=4 --pad-oper --pad-header --align-pointer=name --align-reference=name"'
let g:formatdef_astyle_cpp = '"astyle --mode=cpp --style=attach --indent=spaces=4 --align-pointer=name --align-reference=name"'

" Configuración especial para jq (formateador JSON)
let g:formatdef_jq = '"jq ."'

" AutoPairs - Desactivar ' en Scheme/Racket
augroup auto_pairs_disable_apostrophe
  autocmd!
  autocmd FileType scheme,racket let b:AutoPairs = {'(': ')', '[': ']', '{': '}', '"': '"'}
augroup END

" ==============================================================================
" 10. Atajos Personalizados
" ==============================================================================

" Navegación
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent> <Tab> :bn<CR>
nnoremap <silent> <S-Tab> :bp<CR>

" Gestión de buffers
nnoremap <leader>bd :bd<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>

" Comandos personalizados
command! FTSH set filetype=sh
command! DoasRead execute 'e doas://' . expand('%:p')
command! DoasWrite execute 'write !doas tee % > /dev/null'

" Abreviaciones
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" Ejecutar scripts con F5 según filetype
let g:filetype_exec_commands = {
    \ 'python': 'python3',
    \ 'perl': 'perl',
    \ 'sh': 'bash',
    \ }

augroup filetype_exec
  autocmd!
  for [ft, cmd] in items(g:filetype_exec_commands)
    execute printf(
      \ 'autocmd FileType %s nnoremap <buffer> <F5> :update<Bar>!%s %%<CR>',
      \ ft, cmd)
    execute printf(
      \ 'autocmd FileType %s vnoremap <buffer> <F5> :<C-u>''<,''>w !%s<CR>',
      \ ft, cmd)
  endfor
augroup END

" ==============================================================================
" 11. Temas y Colores
" ==============================================================================
syntax enable
set termguicolors
set background=dark
colorscheme gruvbox

let g:gruvbox_bold = 0
let g:gruvbox_italic = 0
let g:gruvbox_invert_selection = 0

" Hace que columnas y barras usen el mismo fondo que el editor
let g:gruvbox_number_column = 'bg0'
let g:gruvbox_sign_column = 'bg0'
let g:gruvbox_color_column = 'bg0'
let g:gruvbox_vert_split = 'bg0'

let g:everforest_background = 'soft'
let g:gruvbox_material_background = 'soft'
let g:gruvbox_material_better_performance = 1

" Resaltado personalizado
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
highlight CocInlayHint guifg=#666666 guibg=NONE

" ==============================================================================
" 12. Optimizaciones Finales
" ==============================================================================
filetype plugin indent on
syntax on

" function! TrimTrailingWhitespace()
"     if index(['markdown', 'text'], &ft) >= 0 | return | endif

"     " Forzar la ejecución antes que otros plugins
"     noautocmd silent! keeppatterns %s/\s\+$//e

"     " Debug: verificar cambios
"     if &modified
"         echom "Whitespace trimmed in " . expand('%')
"     endif
" endfunction

augroup vimrc
  autocmd!

  " Restaurar cursor (no afecta a Markdown)
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

  " Abrir ayuda en split derecho (no afecta a Markdown)
  autocmd FileType help wincmd L

  " Eliminar espacios al guardar, EXCEPTO en Markdown
  " autocmd BufWritePre * call TrimTrailingWhitespace()
augroup END

