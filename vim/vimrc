" Config {{{
if !filereadable($HOME."/.vim/autoload/plug.vim")
    !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    execute "PlugInstall"
endif

" plugins {{{
call plug#begin($HOME.'/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'morhetz/gruvbox'
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'
let g:airline#extensions#tabline#enabled = 1
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'scrooloose/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/tagbar'
Plug 'machakann/vim-highlightedyank'
Plug 'fatih/vim-go'
let g:go_doc_keywordprg_enabled = 0
let g:go_highlight_function_calls = 1
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 0
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1
let g:go_highlight_operators = 1
Plug 'vim-scripts/restore_view.vim'
Plug 'yko/mojo.vim'
let mojo_highlight_data = 1
set viewoptions=cursor,folds,slash,unix
call plug#end()
" }}}
set nocompatible
set number
set relativenumber
set ttimeoutlen=50 "Tiempo escape
set timeoutlen=1000 "Tiempo siguiente comando
set showcmd "Muestra comando incompleto
set wildmenu "Autocompletado menu
set mouse=a "Soporte mouse
set cursorline "Resalta la linea que estoy
set backspace=indent,eol,start "Para poder borrar con backspace
set clipboard=unnamedplus "Cipboard principal para todo
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

filetype indent plugin on
syntax on

if !isdirectory($HOME."/.vim/undodir")
    call mkdir($HOME."/.vim/undodir", "p")
endif

set undofile
set undodir=~/.vim/undodir

set noswapfile "desactiva los archivos Swap
set nobackup   "no se crean respaldos permanentes cuando se guarda un archivo
set nowritebackup "no se crean respaldos temporales al guardar archivos
set nowrap "Para que la linea se quede entera
set nofoldenable "Al iniciar todo desplegado
set noshowmode "Con airline no hace falta modo

set ignorecase "busquedas no distinguen mayusculas y minusculas
set incsearch   "Muestra la concordancia de una busqueda mientras escribes.
set hlsearch    "Resalta las busquedas

set background=dark
colorscheme gruvbox

let mapleader = ","
let &t_SI = "\<Esc>[6 q"
let &t_EI = "\<Esc>[2 q"
" }}}

" Atajos {{{
" Atajos utiles, cuando te equivocas escribiendo alguno de estos comandos {{{
"ejemplo :w para guardar, si escribes rapido posiblemente escribas :W
cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev Q q
cnoreabbrev Qall qall
" }}}

command SudoWrite :execute ':silent w !sudo tee % > /dev/null' | :edit!
command SudoRead :execute ':silent r !sudo cat %' | :1d 

tnoremap <Esc> <C-\><C-n>
nnoremap <F11> :NERDTreeToggle<CR>
nnoremap <F12> :TagbarToggle<CR>
" Buffers {{{
nnoremap <silent> <C-l> :bn!<CR>
nnoremap <silent> <C-h> :bp!<CR>
nnoremap ññ :b#<CR>
nnoremap ñd :bd<CR>
nnoremap ñD :bd!<CR>
" }}}
nnoremap <C-p> :Files<CR>
nnoremap ñh :noh<CR>
" Vimrc {{{
nnoremap ñv :e $MYVIMRC<CR>
nnoremap ñV :so $MYVIMRC<CR>
" }}}
" }}}

" Trim space {{{
function! StripTrailingWhitespace()
    " Don't strip on these filetypes
    if &ft =~ 'markdown'
        %s/\s\s\+$/<br\/>/e
        return
    endif
    %s/\s\+$//e
endfunction

" autocmd BufWritePre * call StripTrailingWhitespace()
" }}}

" format file {{{
function Formatear()
    if &formatprg != ""
        let l:pos = getpos(".")
        exe 'norm! gggqG'
        call setpos(".", pos)
    else
        echo 'No tienes definido formatprg'
    endif
endfunction

nnoremap gq% :call Formatear()<CR>
"}}}

" coc {{{
let g:coc_global_extensions = [
      \ 'coc-css' ,
      \ 'coc-html',
      \ 'coc-sh',
      \ 'coc-clangd',
      \ 'coc-perl',
      \ 'coc-pyright',
      \ 'coc-json',
      \ 'coc-snippets',
      \ 'coc-vimlsp',
      \ 'coc-java',
      \ 'coc-go',
      \ ]
set updatetime=0

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocActionAsync('doHover')
    endif
endfunction

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
" }}}

" fzf {{{

if executable('batcat') || executable('bat')
    command! -bang -nargs=? -complete=dir Files
                \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse',
                \ '--info=inline', '--preview', '~/.vim/plugged/fzf.vim/bin/preview.sh {}']},
                \ <bang>0)
elseif executable('cat')
    command! -bang -nargs=? -complete=dir Files
                \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse',
                \ '--info=inline', '--preview', 'cat {}']}, <bang>0)
endif

nnoremap <C-p> :Files<CR>
" }}}

" Sesiones {{{

" if !isdirectory($HOME."/.vim/sessions")
"     call mkdir($HOME."/.vim/sessions", "p")
" endif

" au VimLeave * call VimLeave()
" " au VimEnter * call VimEnter()
" let g:PathToSessions = $HOME . "/.vim/sessions/"

" function! VimEnter()
"     if argc() == 0
"         let LoadLastSession = confirm("Restore last session?", "&Yes\n&No")
"         if LoadLastSession == 1
"             exe "source " . g:PathToSessions . "LastSession.vim"
"         endif
"     endif
" endfunction

" function! VimLeave(...)
"     exe "NERDTreeClose"
"     exe "Obsession " . g:PathToSessions . "LastSession.vim"
"     if a:0 != ""
"         execute "Obsession " . g:PathToSessions . a:0 . ".vim"
"     endif
" endfunction

" " A command for setting the session name
" command! -nargs=1 SaveSession :call VimLeave(<args>)
"}}}

" Gui config {{{
if has("gui_running")
    set guicursor+=a:blinkon0 "cursor sin parpadeo
    set guioptions= "no menu interfaces
    if has('unix')
        set guifont=DejaVuSansMono\ Nerd\ Font\ 13
    endif
endif
" }}}

" vim: filetype=vim foldmethod=marker
