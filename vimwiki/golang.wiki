= Iniciar proyecto =
`go mod init <nombre del proyecto>`
- Al crear el codigo fuente todo lo que pongamos en import con el comando `go mod tidy` nos modifica el go.mod y genera go.sum
[[https://golangbyexample.com/go-mod-sum-module/|explicación en ingles]]
= Variables de entorno =

- obtener variables de entorno de go `go env` 
- modificar `go env -w <nombre variable>=<valor>`
= Trabajar con fechas =
[[https://golangbyexample.com/add-or-subtract-to-time-go/|fechas sumar y restar]]
[[https://gist.github.com/ik5/672405e8d0c10b5fb6f3d5e4a32a95a5|Distintos formatos en go]]
{{{go
package main

import (
	"fmt"
	"time"
)

func main() {
	fmt.Println("Times: ")
	t := time.Now()
	loc, err := time.LoadLocation("Asia/Jerusalem")

	if err != nil {
		fmt.Println("Opps: ", err)
		return
	}

	fmt.Printf("Format: dd/mm/yy hh:MM:ss PM Mon - %s \n", t.In(loc).Format("02/01/06 03:04:05 PM Jan"))
	fmt.Printf("Format: dd/mm/yy hh:MM:ss PM Da Mon - %s \n", t.In(loc).Format("02/01/06 03:04:05 PM Mon Jan"))
	fmt.Printf("Format: dd/mm/yy hh:MM:ss PM Day Month - %s \n", t.In(loc).Format("02/01/06 03:04:05 PM Monay January"))
	fmt.Printf("Format: d/m/y h:M:s PM - %s\n", t.In(loc).Format("2/1/6 3:4:5 PM"))
	fmt.Printf("Format: _d/m/y h:M:s PM - %s\n", t.In(loc).Format("_2/1/6 3:4:5 PM"))
	fmt.Printf("Format: dd/mm/yy hh:MM:ss PM - %s \n", t.In(loc).Format("02/01/06 03:04:05 PM"))
	fmt.Printf("Format: dd/mm/yyyy hh:MM:ss PM - %s \n", t.In(loc).Format("02/01/2006 03:04:05 PM"))
	fmt.Printf("Format: dd/mm/yyyy hh:MM:ss.ms PM - %s \n", t.In(loc).Format("02/01/2006 03:04:05.000 PM"))
	fmt.Printf("Format: dd/mm/yyyy hh:MM:ss.000ms PM - %s \n", t.In(loc).Format("02/01/2006 03:04:05.000000 PM"))
	fmt.Printf("Format: dd/mm/yyyy hh:MM:ss.000000ms PM - %s \n", t.In(loc).Format("02/01/2006 03:04:05.000000000 PM"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss TZName - %s\n", t.In(loc).Format("02/01/2006 15:04:05 MST"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss Z - %s\n", t.In(loc).Format("02/01/2006 15:04:05 Z7"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss Z - %s\n", t.In(loc).Format("02/01/2006 15:04:05 Z07"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss ZZ - %s\n", t.In(loc).Format("02/01/2006 15:04:05 Z0700"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss Z:Z - %s\n", t.In(loc).Format("02/01/2006 15:04:05 Z07:00"))
	fmt.Printf("Format dd/mm/yyyy hh:MM:ss Z:Z - %s\n", t.In(loc).Format("02/01/2006 15:04:05 -07:00"))
}


/* Output:
Times: 
Format: dd/mm/yy hh:MM:ss PM Mon - 09/11/16 10:56:30 AM Nov 
Format: dd/mm/yy hh:MM:ss PM Da Mon - 09/11/16 10:56:30 AM Wed Nov 
Format: dd/mm/yy hh:MM:ss PM Day Month - 09/11/16 10:56:30 AM Monay November 
Format: d/m/y h:M:s PM - 9/11/6 10:56:30 AM
Format: _d/m/y h:M:s PM -  9/11/6 10:56:30 AM
Format: dd/mm/yy hh:MM:ss PM - 09/11/16 10:56:30 AM 
Format: dd/mm/yyyy hh:MM:ss PM - 09/11/2016 10:56:30 AM 
Format: dd/mm/yyyy hh:MM:ss.ms PM - 09/11/2016 10:56:30.952 AM 
Format: dd/mm/yyyy hh:MM:ss.000ms PM - 09/11/2016 10:56:30.952216 AM 
Format: dd/mm/yyyy hh:MM:ss.000000ms PM - 09/11/2016 10:56:30.952216972 AM 
Format dd/mm/yyyy hh:MM:ss TZName - 09/11/2016 10:56:30 IST
Format dd/mm/yyyy hh:MM:ss Z - 09/11/2016 10:56:30 Z7
Format dd/mm/yyyy hh:MM:ss Z - 09/11/2016 10:56:30 +02
Format dd/mm/yyyy hh:MM:ss ZZ - 09/11/2016 10:56:30 +0200
Format dd/mm/yyyy hh:MM:ss Z:Z - 09/11/2016 10:56:30 +02:00
Format dd/mm/yyyy hh:MM:ss Z:Z - 09/11/2016 10:56:30 +02:00
*/
}}}

= go-ole =
- Format para guardar con go-ole [[https://docs.microsoft.com/es-es/office/vba/api/Excel.XlFileFormat|formatos ole]]
= html template =
{{{go
package main

import (
	"bytes"
	"fmt"
	"html/template"
	"log"
	"os"
)

func main() {

	const tpl = `
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>{{.Title}}</title>
	</head>
	<body>
		{{range .Items}}<div>{{ . }}</div>{{else}}<div><strong>no rows</strong></div>{{end}}
	</body>
</html>`

	check := func(err error) {
		if err != nil {
			log.Fatal(err)
		}
	}
	t, err := template.New("webpage").Parse(tpl)
	check(err)

	data := struct {
		Title string
		Items []string
	}{
		Title: "My page",
		Items: []string{
			"My photos",
			"My blog",
		},
	}

	err = t.Execute(os.Stdout, data)
	check(err)

	noItems := struct {
		Title string
		Items []string
	}{
		Title: "My another page",
		Items: []string{},
	}

	var tplhtml bytes.Buffer
	err = t.Execute(&tplhtml, noItems)
	check(err)
	prueba := tplhtml.String()
	fmt.Println(prueba)
}
}}}
= chromedp =
{{{go
package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"time"

	"github.com/chromedp/cdproto/page"
	"github.com/chromedp/chromedp"
	"github.com/chromedp/chromedp/kb"
)

func main() {

	wordPtr := flag.Bool("gui", false, "a bool")
	flag.Parse()
	var ctx context.Context
	var cancel context.CancelFunc
	fmt.Println("word:", *wordPtr)
	if *wordPtr {
		ctx, cancel = chromedp.NewExecAllocator(context.Background(), append(chromedp.DefaultExecAllocatorOptions[:], chromedp.Flag("headless", false))...)
		defer cancel()
		ctx, cancel = chromedp.NewContext(ctx)
		defer cancel()
	} else {
		ctx, cancel = chromedp.NewContext(context.Background())
		defer cancel()

	}

	chromedp.ListenTarget(ctx, func(ev interface{}) {
		if _, ok := ev.(*page.EventJavascriptDialogOpening); ok {
			t := page.HandleJavaScriptDialog(false)
			go func() {
				if err := chromedp.Run(ctx, t); err != nil {
					// handle error
				}

				// ok
			}()
		}
	})
	if err := chromedp.Run(ctx,
		chromedp.Navigate("https://extranet2.crm.euskaltel.es/Net.Ap.Acceso/acceso.aspx?target=Login"),
		chromedp.WaitReady("txtUsuario", chromedp.ByID),
		chromedp.SendKeys("txtUsuario", <"Usuario">, chromedp.ByID),
		chromedp.SendKeys("txtPassword", <"Contraseña">, chromedp.ByID),
		chromedp.Click("btnEntrar", chromedp.ByID),
	); err != nil {
		log.Println(err)
	}

	// time.Sleep(60 * time.Second)
	hoy := time.Now()
	ayer := hoy.AddDate(0, 0, -1)
	hoyStr := hoy.Format("02/01/2006")
	ayerStr := ayer.Format("02/01/2006")
	if err := chromedp.Run(ctx,
		chromedp.WaitVisible("IMGSCROLL", chromedp.ByID),
		chromedp.Navigate("https://extranet2.crm.euskaltel.es/Net.Ap.WebInstaladores/WebInstaladores.aspx?target=WebInstaladoresBuscar"),
	); err != nil {
		log.Println(err)
	}
	if err := chromedp.Run(ctx,
		chromedp.WaitReady("txtCodigoOs", chromedp.ByID),
		chromedp.SendKeys("selectFiltroFecha", "Entre", chromedp.ByID),
		chromedp.SendKeys("txtFechaCita", ayerStr, chromedp.ByID),
		chromedp.SendKeys("txtFechaCitaHasta", hoyStr, chromedp.ByID),
		chromedp.KeyEvent(kb.Escape),
	); err != nil {
		log.Println(err)
	}
	if err := chromedp.Run(ctx,
		chromedp.SendKeys("AqCtrlBindableTipoTarea", "TECNICO", chromedp.ByID),
		chromedp.SendKeys("AqCtrlBindableCatalogo", "MSHF", chromedp.ByID),
		chromedp.SendKeys("AqCtrlBindableTipo", "FLUJO", chromedp.ByID),
		chromedp.SendKeys("AqCtrlBindableEstado", "Completada", chromedp.ByID),
	); err != nil {
		log.Println(err)
	}
	var res string
	for {
		if err := chromedp.Run(ctx,
			page.SetDownloadBehavior(page.SetDownloadBehaviorBehaviorAllow).WithDownloadPath("."),
			chromedp.WaitVisible("btnExportarExcel", chromedp.ByID),
			chromedp.EvaluateAsDevTools(`document.querySelector("#btnExportarExcel").click()`, &res),
		); err != nil {
			log.Println(err)
		}
		time.Sleep(time.Minute)
	}
}
}}}
